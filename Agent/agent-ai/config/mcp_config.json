{
  "servers": {
    "dynamic_local": {
      "transport": "stdio",
      "command": "python",
      "args": ["./servers/mcp_server.py"],
      "env": {
        "MCP_CONFIG_PATH": "./config/mcp_config.json",
        "PYTHONPATH": "."
      }
    }
  },

  "mcpServers": {
    "local-memory": {
      "command": "python",
      "args": ["-m", "src.server", "stdio"],
      "cwd": "/path/to/chat-history-recorder"
    }
  },

  "tool_filters": {
    "allow": ["get_current_time", "calculate_math"],
    "deny": []
  },
  "model": "openai:gpt-4o-mini",
  "prompt": "You can use MCP tools defined in the config. When user asks for time, use get_current_time tool.",

  "dynamic_tools": [
    {
      "name": "get_current_time",
      "description": "현재 시간을 반환합니다. 시간대를 지정할 수 있습니다.",
      "type": "python",
      "code": "from datetime import datetime\nfrom zoneinfo import ZoneInfo\n\ntz = params.get('timezone', 'Asia/Seoul')\nif tz == 'UTC':\n    dt = datetime.now()\nelse:\n    try:\n        dt = datetime.now(ZoneInfo(tz))\n    except:\n        dt = datetime.now()\n\nresult = dt.strftime('%Y-%m-%d %H:%M:%S %Z')",
      "schema": {
        "type": "object",
        "properties": {
          "timezone": {
            "type": "string",
            "description": "시간대 (예: Asia/Seoul, America/New_York)",
            "default": "Asia/Seoul"
          }
        }
      }
    },

    {
      "name": "calculate_math",
      "description": "수학 계산을 수행합니다. 복잡한 수식도 계산할 수 있습니다.",
      "type": "python",
      "code": "import math\n\nexpression = params.get('expression', '0')\ntry:\n    # 안전한 계산을 위해 eval 대신 제한된 환경 사용\n    allowed = {'__builtins__': {}, 'math': math, 'abs': abs, 'round': round, 'min': min, 'max': max, 'sum': sum}\n    result = eval(expression, allowed)\nexcept Exception as e:\n    result = f'계산 오류: {str(e)}'",
      "schema": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string",
            "description": "계산할 수학 표현식 (예: '2 + 3 * 4', 'math.sqrt(16)')"
          }
        },
        "required": ["expression"]
      }
    },

    {
      "name": "web_request",
      "description": "HTTP 요청을 보내어 웹 데이터를 가져옵니다.",
      "type": "http",
      "method": "GET",
      "url": "{url}",
      "headers": {
        "User-Agent": "Dynamic-MCP-Agent/1.0"
      },
      "schema": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "요청할 URL"
          }
        },
        "required": ["url"]
      }
    },

    {
      "name": "file_operations",
      "description": "파일을 읽기, 쓰기, 목록 조회 등의 파일 작업을 수행합니다.",
      "type": "file",
      "path": "{filepath}",
      "operation": "{operation}",
      "schema": {
        "type": "object",
        "properties": {
          "filepath": {
            "type": "string",
            "description": "대상 파일 경로"
          },
          "operation": {
            "type": "string",
            "enum": ["read", "write", "append", "exists", "list"],
            "description": "수행할 파일 작업"
          },
          "content": {
            "type": "string",
            "description": "쓰기/추가 작업 시 사용할 내용"
          }
        },
        "required": ["filepath", "operation"]
      }
    },

    {
      "name": "system_command",
      "description": "시스템 명령어를 실행합니다. (주의: 안전한 명령어만 사용하세요)",
      "type": "shell",
      "command": "{command}",
      "schema": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "실행할 시스템 명령어"
          }
        },
        "required": ["command"]
      }
    },

    {
      "name": "random_generator",
      "description": "랜덤한 값을 생성합니다. 숫자, 문자열, 선택 등이 가능합니다.",
      "type": "python",
      "code": "import random\nimport string\n\nrand_type = params.get('type', 'number')\n\nif rand_type == 'number':\n    min_val = params.get('min', 1)\n    max_val = params.get('max', 100)\n    result = random.randint(min_val, max_val)\nelif rand_type == 'float':\n    min_val = params.get('min', 0.0)\n    max_val = params.get('max', 1.0)\n    result = random.uniform(min_val, max_val)\nelif rand_type == 'string':\n    length = params.get('length', 10)\n    chars = string.ascii_letters + string.digits\n    result = ''.join(random.choice(chars) for _ in range(length))\nelif rand_type == 'choice':\n    choices = params.get('choices', ['A', 'B', 'C'])\n    result = random.choice(choices)\nelse:\n    result = 'Unsupported random type'",
      "schema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": ["number", "float", "string", "choice"],
            "description": "생성할 랜덤 값의 타입"
          },
          "min": {
            "type": "number",
            "description": "최소값 (number/float 타입)"
          },
          "max": {
            "type": "number",
            "description": "최대값 (number/float 타입)"
          },
          "length": {
            "type": "integer",
            "description": "문자열 길이 (string 타입)"
          },
          "choices": {
            "type": "array",
            "items": {"type": "string"},
            "description": "선택할 항목들 (choice 타입)"
          }
        },
        "required": ["type"]
      }
    }
  ]
}